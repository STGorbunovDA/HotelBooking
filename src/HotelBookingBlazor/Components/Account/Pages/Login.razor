@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using HotelBookingBlazor.Data
@using System.Security.Claims

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>


<div class="row d-flex justify-content-center">
    <div class="col-md-4">
        <section>
            <h1>Аунтификация</h1>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" Enhance>
                <DataAnnotationsValidator />
                <h2>Используйте учетную запись для входа.</h2>
                <hr />
              
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div class="mt-3">
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var x = UserManager;
        var user = await UserManager.FindByEmailAsync(Input.Email);

        if(user is null)
        {
            errorMessage = "Error: User does not exist.";
            return;
        }

        var result = await SignInManager.CheckPasswordSignInAsync(user, Input.Password, lockoutOnFailure: false);

        if (!result.Succeeded)
        {
            errorMessage = "Error: Incorrect password.";
            return;
        }

        Claim[] additionalClaims = [
            new Claim(nameof(AppConstans.CustomClaimTypes.FullName), user.FullName),
            new Claim(nameof(AppConstans.CustomClaimTypes.RoleName), user.RoleName),
            new Claim(nameof(AppConstans.CustomClaimTypes.Designation), user.Designation ?? ""),
            new Claim(nameof(AppConstans.CustomClaimTypes.Image), user.Image ?? ""),
            new Claim(nameof(AppConstans.CustomClaimTypes.Email), user.Email ?? ""),
        ];

        await SignInManager.SignInWithClaimsAsync(user, Input.RememberMe, additionalClaims);

        Logger.LogInformation("User logged in.");
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
