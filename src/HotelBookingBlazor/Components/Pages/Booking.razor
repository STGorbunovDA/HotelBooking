@page "/booking"
@using HotelBookingBlazor.Data

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@layout InnerPageLayout

@inject IRoomsService RoomsService
@inject IUserService UserService
@inject IBookingService BookingService
@inject IPaymentService PaymentService


@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="PageName">
    Бронирование
</Microsoft.AspNetCore.Components.Sections.SectionContent>

@* <BookingBig /> *@

<div class="container-xxl py-5">
    <div class="container">
        <div class="text-center wow fadeInUp" data-wow-delay="0.1s">
            <h6 class="section-title text-center text-primary text-uppercase">Забронировать номер</h6>
            <h1 class="mb-5">Номер A <span class="text-primary text-uppercase">Люкс</span></h1>
        </div>
        <div class="row g-5">
            <div class="col-lg-6">
                <div class="row g-3">
                    <div class="col-6 text-end">
                        <img class="img-fluid rounded w-75 wow zoomIn" data-wow-delay="0.1s" src="img/about-1.jpg" style="margin-top: 25%;">
                    </div>
                    <div class="col-6 text-start">
                        <img class="img-fluid rounded w-100 wow zoomIn" data-wow-delay="0.3s" src="img/about-2.jpg">
                    </div>
                    <div class="col-6 text-end">
                        <img class="img-fluid rounded w-50 wow zoomIn" data-wow-delay="0.5s" src="img/about-3.jpg">
                    </div>
                    <div class="col-6 text-start">
                        <img class="img-fluid rounded w-75 wow zoomIn" data-wow-delay="0.7s" src="img/about-4.jpg">
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="wow fadeInUp" data-wow-delay="0.2s">
                    <EditForm Model="_model" OnValidSubmit="BookRoomAsync">
                        <DataAnnotationsValidator />
                        <div class="row g-3">
                            @if (!_isAuthenticated)
                            {
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <InputText @bind-Value="_model.FirstName" class="form-control" id="name" placeholder="введите имя" />
                                        <label for="name">Ваше имя</label>
                                    </div>
                                    <ValidationMessage For="() => _model.FirstName" class="text-danger" />
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <InputText @bind-Value="_model.LastName" class="form-control" id="last-name" placeholder="введите фамилию" />
                                        <label for="last-name">Ваша фамилия</label>
                                    </div>
                                    <ValidationMessage For="() => _model.LastName" class="text-danger" />
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <InputText @bind-Value="_model.Email" class="form-control" id="email" placeholder="введите почту" />
                                        <label for="email">Ваша почта</label>
                                    </div>
                                    <ValidationMessage For="() => _model.Email" class="text-danger" />
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <InputText @bind-Value="_model.ContactNumber" class="form-control" id="contactNumber" placeholder="введите номер" />
                                        <label for="contactNumber">Ваш телефон</label>
                                    </div>
                                    <ValidationMessage For="() => _model.ContactNumber" class="text-danger" />
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <InputText type="password" @bind-Value="_model.Password" class="form-control" id="password" placeholder="введите пароль" />
                                        <label for="password">Ваш пароль</label>
                                    </div>
                                    <ValidationMessage For="() => _model.Password" class="text-danger" />
                                </div>

                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <InputText type="password" @bind-Value="_model.ConfirmPassword" class="form-control" id="confirmPassword" placeholder="Подтверждение пароля" />
                                        <label for="confirmPassword">Подтверждение пароля</label>
                                    </div>
                                    <ValidationMessage For="() => _model.ConfirmPassword" class="text-danger" />
                                </div>
                            }

                            <div class="col-md-6">
                                <div class="form-floating date" id="date3" data-target-input="nearest">
                                    <InputDate @bind-Value="_model.CheckInDate" class="form-control datetimepicker-input" id="checkin" placeholder="Дата заезда" data-target="#date3" data-toggle="datetimepicker" />
                                    <label for="checkin">Дата заезда</label>
                                </div>
                                <ValidationMessage For="() => _model.CheckInDate" class="text-danger" />
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating date" id="date4" data-target-input="nearest">
                                    <InputDate @bind-Value="_model.CheckOutDate" class="form-control datetimepicker-input" id="checkout" placeholder="Дата выезда" data-target="#date4" data-toggle="datetimepicker" />
                                    <label for="checkout">Дата выезда</label>
                                </div>
                                <ValidationMessage For="() => _model.CheckOutDate" class="text-danger" />
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <InputSelect ValueExpression="() => _model.Adults"
                                                 ValueChanged="(int? newAdults) => HandleAdultsChange(newAdults)"
                                                 class="form-select"
                                                 id="select1">
                                        @for (int i = 0; i < 6; i++)
                                        {
                                            <option value="@i">@i @(i > 1 ? "Взрослых" : "Взрослый")</option>
                                        }
                                    </InputSelect>
                                    <label for="select1">Выбор количества взрослых</label>
                                </div>
                                <ValidationMessage For="() => _model.Adults" class="text-danger" />
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <InputSelect ValueExpression="() => _model.Children"
                                                 ValueChanged="(int? newChildrenValue) => HandleChildrenChange(newChildrenValue)"
                                                 class="form-select" id="select2">
                                        @for (int i = 0; i < 6; i++)
                                        {
                                            <option value="@i">@i @(i > 1 ? "Ребёнка" : "Ребёнок")</option>
                                        }
                                    </InputSelect>
                                    <label for="select2">Выбор количества детей</label>
                                </div>
                                <ValidationMessage For="() => _model.Children" class="text-danger" />
                            </div>
                            <div class="col-12">
                                <div class="form-floating">
                                    <InputSelect ValueExpression="() => _model.RoomTypeId"
                                                 ValueChanged="(short id) => HandleRoomTypeChange(id)"
                                                 class="form-select" id="select3">
                                        <option value="0">Выбор комнаты</option>
                                        @foreach (var roomType in _roomTypes)
                                        {
                                            <option value="@roomType.Id">@roomType.Name - @roomType.AdditionalData</option>
                                        }
                                    </InputSelect>
                                    <label for="select3">Выбор количества комнат</label>
                                </div>
                                <ValidationMessage For="() => _model.RoomTypeId" class="text-danger" />
                            </div>
                            <div class="col-12">
                                <div class="form-floating">
                                    <InputTextArea @bind-Value="_model.SpecialRequest" class="form-control" placeholder="Дополнительные услуги" id="message" style="height: 100px" />
                                    <label for="message">Дополнительные услуги</label>
                                </div>
                                <ValidationMessage For="() => _model.SpecialRequest" class="text-danger" />
                            </div>
                            <div class="col-12">
                                <p>
                                    <strong>Total Amount: @TotalAmount.ToString("c")</strong>
                                </p>
                            </div>
                            <div class="col-12">
                                <button class="btn btn-primary w-100 py-3" type="submit">Забронировать</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    [SupplyParameterFromQuery(Name = "room-type")]
    public string? SelectedRoomType { get; set; }

    private BookingModel _model = new();

    private decimal _price;

    private int NoOfDays => (_model.CheckOutDate.DayNumber - _model.CheckInDate.DayNumber);
    private decimal TotalAmount => NoOfDays * _price;

    private LookupModel<short, decimal>[] _roomTypes = [];

    private bool _isAuthenticated;
    private string? _userId;
    private string? _errorMessage;
    protected override async Task OnInitializedAsync()
    {
        var roomTypesTask = RoomsService.GetRoomTypesLookup();
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            // user is logged in
            // fetch use details from AuthState claims
            _isAuthenticated = true;
            _userId = authState.User.GetUserId();
            _model.SetDummyValues();
        }

        _roomTypes = await roomTypesTask;

        if (!string.IsNullOrWhiteSpace(SelectedRoomType)
            && short.TryParse(SelectedRoomType, out short roomTypeId)
            && roomTypeId > 0)
        {
            HandleRoomTypeChange(roomTypeId);
        }
    }

    private void HandleRoomTypeChange(short newRoomTypeId)
    {
        _model.RoomTypeId = newRoomTypeId;
        var roomType = _roomTypes.FirstOrDefault(rt => rt.Id == newRoomTypeId);
        _price = roomType.AdditionalData;
    }

    private FilterModel? _filterModel = new();
    private async Task FilterRoomTypes()
    {
        _roomTypes = await RoomsService.GetRoomTypesLookup(_filterModel);
    }

    private async Task HandleAdultsChange(int? newAdults)
    {
        _model.Adults = newAdults;
        _filterModel.Adults = _model.Adults;
        await FilterRoomTypes();
    }

    private async Task HandleChildrenChange(int? newValue)
    {
        _model.Children = newValue;
        _filterModel.Children = _model.Children;
        await FilterRoomTypes();
    }

    private async Task BookRoomAsync()
    {
        string? userId = _userId;
        if (!_isAuthenticated)
        {
            // Register this user as guest
            userId = await RegisterUserAsync();
            if (userId is null)
            {
                return;
            }
        }
        // Make Booking here
        var bookingId = await MakeBookingAsync(userId!);
        if (bookingId is null) return;

        // Redirect user to Stripe Payment Page
        await PayNowAsync(bookingId.Value);
    }

    private async Task<string?> RegisterUserAsync()
    {
        var user = new ApplicationUser();

        user.FirstName = _model.FirstName;
        user.LastName = _model.LastName;
        user.ContactNumber = _model.ContactNumber;
        user.Email = _model.Email;
        user.RoleName = RoleType.Guest.ToString();

        var result = await UserService.CreateUserAsync(user, _model.Email, _model.Password);
        if (!result.IsSuccess && (result.Data is null || string.IsNullOrWhiteSpace(result.Data.Id)))
        {
            _errorMessage = result.ErrorMessage;
            return null;
        }
        return result.Data.Id;
    }

    private async Task<long?> MakeBookingAsync(string userId)
    {
        _model.Amount = TotalAmount;
        var result = await BookingService.MakeBookingAsync(_model, userId);
        if (!result.IsSuccess)
        {
            _errorMessage = result.ErrorMessage;
            return null;
        }
        return result.Data;
    }

    private async Task PayNowAsync(long bookingId)
    {
        var domain = NavigationManager.BaseUri.TrimEnd('/');
        var roomTypeName = _roomTypes.First(rt => rt.Id == _model.RoomTypeId).Name;

        var paymentModel = new PaymentModel(bookingId, roomTypeName, NoOfDays, _price);
        var paymentUrl = await PaymentService.GeneratePaymentUrl(paymentModel, _userId, domain);

        NavigationManager.NavigateTo(paymentUrl);
    }
}
