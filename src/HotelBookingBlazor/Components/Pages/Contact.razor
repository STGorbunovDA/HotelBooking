@page "/contact"
@using Microsoft.Extensions.Options

@layout InnerPageLayout
@attribute [StreamRendering]
@inject IEnquiryService EnquiryService
@inject IOptions<ContactInfoOptions> ContactInfoOptions

<Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="PageName">
    Контакты
</Microsoft.AspNetCore.Components.Sections.SectionContent>

<div class="container-xxl py-5">
    <div class="container">
        <div class="text-center wow fadeInUp" data-wow-delay="0.1s">
            <h6 class="section-title text-center text-primary text-uppercase">Связь с нами</h6>
            <h1 class="mb-5"><span class="text-primary text-uppercase">Контакты</span> Для любого вопроса</h1>
        </div>
        <div class="row g-4">
            <div class="col-12">
                <div class="row gy-4">
                    <div class="col-md-4">
                        <h6 class="section-title text-start text-primary text-uppercase">Бронирование</h6>
                        <p><i class="fa fa-envelope-open text-primary me-2"></i>@_contactInfoOptions.BookingEmail</p>
                    </div>
                    <div class="col-md-4">
                        <h6 class="section-title text-start text-primary text-uppercase">Общие</h6>
                        <p><i class="fa fa-envelope-open text-primary me-2"></i>@_contactInfoOptions.GeneralEmail</p>
                    </div>
                    <div class="col-md-4">
                        <h6 class="section-title text-start text-primary text-uppercase">Технические</h6>
                        <p><i class="fa fa-envelope-open text-primary me-2"></i>@_contactInfoOptions.TechnicalEmail</p>
                    </div>
                </div>
            </div>
            <div class="col-md-6 wow fadeIn" data-wow-delay="0.1s">
                <iframe class="position-relative rounded w-100 h-100"
                        src="https://yandex.ru/map-widget/v1/?ll=43.184394%2C56.242679&z=14"
                        frameborder="0" style="min-height: 350px; border:0;" allowfullscreen="" aria-hidden="false"
                        tabindex="0"></iframe>
            </div>
            <div class="col-md-6">
                <div class="wow fadeInUp" data-wow-delay="0.2s">
                    <EditForm Model="Model" Enhance FormName="enquiry-form" OnValidSubmit="SendMessageAsync">
                         <DataAnnotationsValidator />
                         <div class="row g-3">
                             <div class="col-md-6">
                                 <div class="form-floating">
                                     <InputText @bind-Value="Model.Name" class="form-control" id="name" placeholder="Введите имя" />
                                     <label for="name">Ваше Имя</label>
                                 </div>
                                 <ValidationMessage For="() => Model.Name" class="text-danger" />
                             </div>
                             <div class="col-md-6">
                                 <div class="form-floating">
                                     <InputText @bind-Value="Model.Email" class="form-control" id="email" placeholder="Введите почту" />
                                     <label for="name">Ваше почта</label>
                                 </div>
                                 <ValidationMessage For="() => Model.Email" class="text-danger" />
                             </div>
                             <div class="col-12">
                                 <div class="form-floating">
                                     <InputText @bind-Value="Model.Subject" class="form-control" id="subject" placeholder="Заголовок (обращение)" />
                                     <label for="subject">Заголовок</label>
                                 </div>
                                 <ValidationMessage For="() => Model.Subject" class="text-danger" />
                             </div>
                             <div class="col-12">
                                 <div class="form-floating">
                                     <InputTextArea @bind-Value="Model.Message" class="form-control" placeholder="Введите ваше сообщение" id="message" style="height: 150px" />
                                     <label for="message">Сообщение</label>
                                 </div>
                                 <ValidationMessage For="() => Model.Message" class="text-danger" />
                             </div>
                             <div class="col-12">
                                 @if (!string.IsNullOrWhiteSpace(_message))
                                {
                                    <p class="text-success my-3">
                                        <strong>@_message</strong>
                                    </p>
                                }
                                @if (!string.IsNullOrWhiteSpace(_error))
                                {
                                    <p class="text-danger my-3">
                                        <strong>@_error</strong>
                                    </p>
                                }
                            </div>
                            <div class="col-12">
                                <button class="btn btn-primary w-100 py-3" type="submit" disabled="@_isProcessing">
                                    @(_isProcessing ? "Отправка..." : "Отправить сообщение")
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm(FormName = "enquiry-form")]
    public EnquiryModel Model { get; set; } = new();

    [CascadingParameter]
    public HttpContext HttpContext { get; set; }

    private ContactInfoOptions _contactInfoOptions = new();

    private string? _error;
    private string? _message;
    private bool _isProcessing;

    protected override void OnInitialized()
    {
        _contactInfoOptions = ContactInfoOptions.Value;

        if(HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if(HttpContext.User?.Identity?.IsAuthenticated == true)
            {
               Model.Name = HttpContext.User.FindFirst(AppConstans.CustomClaimTypes.FullName)?.Value.ToString();
                Model.Email = HttpContext.User.FindFirst(AppConstans.CustomClaimTypes.Email)?.Value.ToString();
            }
        }
    }

    private async Task SendMessageAsync()
    {
        _error = _message = null;
        _isProcessing = true;

        var result = await EnquiryService.AddEnquiryAsync(Model);

        if (!result.IsSucces)
        {
            _error = result.ErrorMessage ?? "Ошибка при отправке запроса";
        }
        else
        {
            _message = "Запрос отправлен успешно";
        }
        Model = new();
        _isProcessing = false;
    }
}
