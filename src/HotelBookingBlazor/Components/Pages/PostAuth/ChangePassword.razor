@page "/change-password"

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserService UserService
@attribute [StreamRendering]

<div class="container">
    <h1>Изменить пароль</h1>
    <hr />
    <div class="row d-flex justify-content-center">
        <div class="col-sm-4">
            @if (!string.IsNullOrWhiteSpace(_message))
            {
                <p class="text-success">
                    <strong>@_message</strong>
                </p>
            }
            @if (!string.IsNullOrWhiteSpace(_error))
            {
                <p class="text-danger fa-bold">
                    <strong>@_error</strong>
                </p>
            }
            @if (_userId is not null)
            {
                <EditForm Model="Model" Enhance FormName="change-password" OnValidSubmit="ChangePasswordAsync">
                    <DataAnnotationsValidator/>
                    <div class="mb-3">
                        <label class="form-label">Текущий пароль</label>
                        <InputText type="password" @bind-Value="Model.CurrentPassword" class="form-control" placeholder="Текущий пароль"></InputText>
                       <ValidationMessage For="() => Model.CurrentPassword" class="text-danger" />
                    </div>
                     <div class="mb-3">
                         <label class="form-label">Новый пароль</label>
                         <InputText type="password" @bind-Value="Model.NewPassword" class="form-control" placeholder="Новый пароль"></InputText>
                         <ValidationMessage For="() => Model.NewPassword" class="text-danger" />
                     </div>
                     <div class="mb-3">
                         <label class="form-label">Подвердите новый пароль</label>
                         <InputText type="password" @bind-Value="Model.ConfirmNewPassword" class="form-control" placeholder="Пароль подтверждения"></InputText>
                         <ValidationMessage For="() => Model.ConfirmNewPassword" class="text-danger" />
                     </div>
                     <div class="mb-3">
                         <button type="submit" class="btn btn-primary btn-sm" disabled="@_isProcessing">
                             @(_isProcessing ? "В обработке..." : "Изменить пароль")
                         </button>
                     </div>
                </EditForm>
            }

        </div>
    </div>
</div>

@code {
    private string? _error;
    private string? _message;
    private string? _userId;
    private bool _isProcessing;

    [SupplyParameterFromForm]
    private ChangePasswordModel Model { get; set; } = new();

    [CascadingParameter]
    public HttpContext HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState is null || authState.User.Identities is null || !authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        _userId = authState.User.GetUserId()!;
    }

    private async Task ChangePasswordAsync()
    {
        _message = _error = null;
        _isProcessing = true;
        var userId = HttpContext.User.GetUserId();
        var result = await UserService.ChangePasswordAsync(Model, userId);

        if (!result.IsSucces)
        {
            _error = result.ErrorMessage;
        }
        else
        {
            _message = "Пароль успешно изменен";
        }
        _isProcessing = false;
    }
}
