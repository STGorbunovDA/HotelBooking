@page "/staff-admin/manage-bookings"
@using HotelBookingBlazor.Data.Entities
@using Microsoft.AspNetCore.Components.QuickGrid

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject IBookingService BookingService
@inject IRoomTypeService RoomTypeService
@inject IJSRuntime JsRuntime

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center">
        <h1>
            Manage Bookings
        </h1>
    </div>
    <hr />
    <div class="table-responsive">
        <QuickGrid ItemsProvider="_bookingProvider" @ref="_bookingsGrid" Pagination="_paginationState" class="table table-striped">
            <PropertyColumn Property="b => b.Id" />
            <PropertyColumn Property="b => b.RoomTypeName" Title="Тип номера" />
            <TemplateColumn Title="Номер комнаты">
                @if (context.RoomId is null)
                {
                    <label class="d-block">Номера нет</label>

                    @if (context.IsRoomNumberAssignable)
                    {
                        <button type="button" class="btn btn-sm btn-primary" @onclick="() => OpenAssignRoomModalAsync(context)">Назначить комнату</button>
                    }
                    else
                    {
                        <small>Номер комнаты может быть присвоен только после оплаты</small>
                    }
                }
                else
                {
                    <button type="button" class="btn btn-sm btn-primary" @onclick="() => OpenAssignRoomModalAsync(context)">@context.RoomNumber</button>
                }
            </TemplateColumn>
            <PropertyColumn Property="b => b.GuestName" Title="Гость" />
            <PropertyColumn Property="b => b.BookedOn" Title="Дата Брони" />
            <PropertyColumn Property="b => b.CheckInDate" Title="Дата заезда" />
            <PropertyColumn Property="b => b.CheckOutDate" Title="Дата выезда" />
            <PropertyColumn Property="b => b.Adults" />
            <PropertyColumn Property="b => b.Children" />
            <PropertyColumn Property="b => b.TotalAmount" Title="Цена"/>
            <PropertyColumn Property="b => b.SpecialRequest" Title="Дополнительно" />
            <PropertyColumn Property="b => b.Status" />
            <PropertyColumn Property="b => b.Remarks" />
            <TemplateColumn Class="grid-action-column">
                <button type="submit" class="btn btn-sm btn-success" disabled="@(!context.CanBeApproved)" @onclick="() => ApproveBookingAsync(context)">Одобрить</button>
                <button type="submit" class="btn btn-sm btn-danger" disabled="@(!context.CanBeCancelled)" @onclick="() => CancelBookingAsync(context)">Отменить</button>
            </TemplateColumn>

        </QuickGrid>
    </div>
    <Paginator State="_paginationState" />
</div>

@if (_isLoading)
{
    <Loader LoadingText="Fetching bookings" />
}

<DialogComponent DialogId="assign-room-to-booking"
                 Show="_booking is not null"
                 Title="Assign/Change Room to Booking"
                 OnCloseModal="HandleAssignRoomModalClose">
    <div>
        <div class="mb-3">
            <label class="form-label">№ Номера: </label>
            <select @bind="_selectedRoomId" class="form-control form-control-sm">
                <option value="0">Select Room</option>
                @foreach (var room in _rooms)
                {
                    <option value="@room.Id">@room.RoomNumber</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <button type="button" class="btn btn-primary btn-sm" @onclick="AssignRoomAsync">Save</button>
        </div>
    </div>

</DialogComponent>

<style type="text/css" scoped>
    .grid-action-column {
        min-width: 190px;
    }
</style>

@code {
    private bool _isLoading;
    private GridItemsProvider<BookingDisplayModel>? _bookingProvider;
    private QuickGrid<BookingDisplayModel> _bookingsGrid;

    private const int PageSize = 10;

    private PaginationState _paginationState = new PaginationState { ItemsPerPage = PageSize };

    protected override void OnInitialized()
    {
        _bookingProvider = async (GridItemsProviderRequest<BookingDisplayModel> request) =>
        {
            _isLoading = true;
            StateHasChanged();

            var result = await BookingService.GetBookingAsync(request.StartIndex, request.Count ?? PageSize);

            _isLoading = false;
            StateHasChanged();
            return GridItemsProviderResult.From<BookingDisplayModel>(result.Records, result.TotalCount);
        };
    }

    private Room[] _rooms = [];
    private BookingDisplayModel? _booking;
    private int _selectedRoomId;

    private async Task OpenAssignRoomModalAsync(BookingDisplayModel booking)
    {
        var rooms = await RoomTypeService.GetRoomsAsync(booking.RoomTypeId);
        if (rooms is null || rooms.Length == 0)
        {
            await JsRuntime.AlertAsync("В отеле нет номеров такого типа");
            return;
        }
        if (!rooms.Any(r => r.IsAvailable))
        {
            await JsRuntime.AlertAsync("В отеле нет номеров такого типа");
        }
        _rooms = rooms.Where(r => r.IsAvailable).ToArray();
        _booking = booking;
    }

    private void HandleAssignRoomModalClose()
    {
        _rooms = [];
        _booking = null;
        _selectedRoomId = 0;
    }

    private async Task AssignRoomAsync()
    {
        if (_booking is not null && _selectedRoomId > 0)
        {
            var result = await RoomTypeService.AssignRoomToBookingAsync(_booking.Id, _selectedRoomId);
            if (!result.IsSucces)
            {
                await JsRuntime.AlertAsync($"Error in assigning/changin room. {result.ErrorMessage}");
                return;
            }
            HandleAssignRoomModalClose();
            await _bookingsGrid.RefreshDataAsync();
        }
    }

    private async Task ApproveBookingAsync(BookingDisplayModel booking)
    {
        if(booking.CanBeApproved)
        {
            if (await JsRuntime.ConfirmAsync("Вы уверены, что хотите одобрить это бронирование?"))
            {
                var result = await BookingService.ApproveBookingAsync(booking.Id);
                if(!result.IsSucces)
                {
                    await JsRuntime.AlertAsync(result.ErrorMessage ?? "Ошибка при подтверждении бронирования");
                    return;
                }
                else
                {
                    await _bookingsGrid.RefreshDataAsync();
                }
            }
        }
    }

    private async Task CancelBookingAsync(BookingDisplayModel booking)
    {
        if(booking.CanBeCancelled)
        {
            if (await JsRuntime.ConfirmAsync("Вы уверены, что хотите отменить это бронирование?"))
            {
                var reason = await JsRuntime.PromptAsync("Cancellation Reason: ");

                if(string.IsNullOrWhiteSpace(reason))
                {
                    await JsRuntime.AlertAsync("Требуется указать причину отмены бронирования");
                    return;
                }
                var result = await BookingService.CancelBookingAsync(booking.Id, reason);

                if (!result.IsSucces)
                {
                    await JsRuntime.AlertAsync(result.ErrorMessage ?? "Ошибка при отмене бронирования");
                    return;
                }
                else
                {
                    await _bookingsGrid.RefreshDataAsync();
                }
            }
        }
    }
}
