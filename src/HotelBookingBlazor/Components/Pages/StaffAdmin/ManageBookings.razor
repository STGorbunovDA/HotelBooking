@page "/staff-admin/manage-bookings"
@using HotelBookingBlazor.Data.Entities
@using Microsoft.AspNetCore.Components.QuickGrid

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject IBookingService BookingService
@inject IRoomTypeService RoomTypeService

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center">
        <h1>
            Manage Bookings
        </h1>
    </div>
    <hr />
    <div class="table-responsive">
        <QuickGrid ItemsProvider="_bookingProvider" Pagination="_paginationState" class="table table-striped">
            <PropertyColumn Property="b => b.Id" />
            <PropertyColumn Property="b => b.RoomTypeName" Title="Тип номера" />
            <TemplateColumn Title="Номер комнаты">
                @if (context.RoomId is null)
                {
                    <small>Номера нет</small>

                    @if (context.IsRoomNumberAssignable)
                    {
                        <button type="button" class="btn btn-sm btn-primary">Назначить комнату</button>
                    }
                    else
                    {
                        <small>Номер комнаты может быть присвоен только после оплаты</small>
                    }
                }
                else
                {
                    <button type="button" class="btn btn-sm btn-primary">@context.RoomNumber</button>
                }
            </TemplateColumn>
            <PropertyColumn Property="b => b.GuestName" Title="Гость" />
            <PropertyColumn Property="b => b.BookedOn" Title="Дата Брони" />
            <PropertyColumn Property="b => b.CheckInDate" Title="Дата заезда" />
            <PropertyColumn Property="b => b.CheckOutDate" Title="Дата выезда" />
            <PropertyColumn Property="b => b.Adults" />
            <PropertyColumn Property="b => b.Children" />
            <PropertyColumn Property="b => b.SpecialRequest" Title="Дополнительно" />
            <PropertyColumn Property="b => b.Status" />
            <PropertyColumn Property="b => b.Remarks" />
            <TemplateColumn>
                <button type="submit" class="btn btn-sm btn-success" disabled="@(!context.CanBeApproved)">Одобрить</button>
                <button type="submit" class="btn btn-sm btn-danger" disabled="@(!context.CanBeCancelled)">Отменить</button>
            </TemplateColumn>

        </QuickGrid>
    </div>
    <Paginator State="_paginationState" />
</div>

@if (_isLoading)
{
    <Loader LoadingText="Fetching bookings" />
}

@code {
    private bool _isLoading;
    private GridItemsProvider<BookingDisplayModel>? _bookingProvider;

    private const int PageSize = 10;

    private PaginationState _paginationState = new PaginationState { ItemsPerPage = PageSize };

    private IDictionary<short, Room[]> _roomTypeRooms = new Dictionary<short, Room[]>();

    protected override void OnInitialized()
    {
        _bookingProvider = async (GridItemsProviderRequest<BookingDisplayModel> request) =>
        {
            _isLoading = true;
            StateHasChanged();

            var result = await BookingService.GetBookingAsync(request.StartIndex, request.Count ?? PageSize);

            _isLoading = false;
            StateHasChanged();
            return GridItemsProviderResult.From<BookingDisplayModel>(result.Records, result.TotalCount);
        };
    }

    private Room[] _rooms = [];

    private async Task AssignRoomAsync(short roomTypeId, long bookingId)
    {
        if (!_roomTypeRooms.TryGetValue(roomTypeId, out var rooms))
        {
            rooms = (await RoomTypeService.GetRoomsAsync(roomTypeId)) ?? [];
            _roomTypeRooms[roomTypeId] = rooms;
        }
        if(rooms.Length == 0)
        {

        }
        _rooms = rooms;
    }
}
