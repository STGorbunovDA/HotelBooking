@page "/staff-admin/manage-bookings"
@using Microsoft.AspNetCore.Components.QuickGrid

@using Booking = HotelBookingBlazor.Data.Entities.Booking;

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject IBookingService BookingService

<div class="container">
    <div class="d-flex justify-content-between align-items-center">
        <h1>
            Manage Bookings
        </h1>
    </div>
    <hr />
    <div class="table-responsive">
        <QuickGrid ItemsProvider="_bookingProvider" Pagination="_paginationState" class="table table-striped">
            <PropertyColumn Property="b => b.Id" />
            <PropertyColumn Property="b => b.RoomType.Name" />
            <PropertyColumn Property="b => b.Room.RoomNumber" />
            <PropertyColumn Property="b => b.Guest.FullName" />
            <PropertyColumn Property="b => b.BookedOn" />
            <PropertyColumn Property="b => b.CheckInDate" />
            <PropertyColumn Property="b => b.CheckOutDate" />
            <PropertyColumn Property="b => b.Adults" />
            <PropertyColumn Property="b => b.Children" />
            <PropertyColumn Property="b => b.SpecialRequest" />
            <PropertyColumn Property="b => b.Status" />
            <PropertyColumn Property="b => b.Remarks" />

        </QuickGrid>
    </div>
    <Paginator State="_paginationState" />
</div>

@if (_isLoading)
{
    <Loader LoadingText="Fetching bookings" />
}

@code {
    private bool _isLoading;
    private GridItemsProvider<Booking>? _bookingProvider;

    private const int PageSize = 10;

    private PaginationState _paginationState = new PaginationState { ItemsPerPage = PageSize };

    protected override void OnInitialized()
    {
        _bookingProvider = async (GridItemsProviderRequest<Booking> request) =>
        {
            _isLoading = true;
            StateHasChanged();

            var result = await BookingService.GetBookingAsync(request.StartIndex, request.Count ?? PageSize);

            _isLoading = false;
            StateHasChanged();
            return GridItemsProviderResult.From<Booking>(result.Records, result.TotalCount);
        };
    }
}
