@page "/staff-admin/manage-room-types/new"
@using HotelBookingBlazor.Data.Entities
@using System.Security.Claims

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHostEnvironment
@rendermode @(new InteractiveServerRenderMode(prerender: false))



@inject IAmenitiesService AmenitiesService
@inject IRoomTypeService RoomTypeService

<div class="container">
    <h1>Создание типа комнаты</h1>
    <hr />
    <EditForm Model="Model" OnValidSubmit="SaveRoomTypeAsync">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-sm-6">
                <div class="mb-3">
                    <label class="form-label">Название: </label>
                    <InputText @bind-Value="Model.Name" class="form-control" placeholder="Название типа комнаты" />
                    <ValidationMessage For="() => Model.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Цена: </label>
                    <InputNumber @bind-Value="Model.Price" class="form-control" placeholder="Цена" />
                    <ValidationMessage For="() => Model.Price" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Кол-во взрослых мест: </label>
                    <InputNumber @bind-Value="Model.MaxAdults" class="form-control" placeholder="Кол-во взрослых мест" />
                    <ValidationMessage For="() => Model.MaxAdults" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Кол-во детских мест: </label>
                    <InputNumber @bind-Value="Model.MaxChildren" class="form-control" placeholder="Кол-во детских мест:" />
                    <ValidationMessage For="() => Model.MaxChildren" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Описание: </label>
                    <InputTextArea @bind-Value="Model.Description" class="form-control" placeholder="Описание" rows="5" />
                    <ValidationMessage For="() => Model.Description" class="text-danger" />
                </div>
            </div>
            <div class="col-sm-6">
                @if (!string.IsNullOrWhiteSpace(_imageUrl))
                {
                    <img src="@_imageUrl" class="img-fluid" />
                }
                <div class="mb-3">
                    <label class="form-label">Изображение: </label>
                    <InputFile OnChange="OnImageSelectAsync" class="form-control" />
                </div>
            </div>

            <div class="col-sm-12 d-flex justify-content-between">
                @foreach (var a in _amenities)
                {
                    <div class="mb-3">
                        <label>
                            <InputCheckbox @bind-Value="a.IsChecked" />
                            <span>@a.Name</span>
                            <InputNumber @bind-Value="a.Unit" class="form-control form-control-sm" placeholder="Кол-во" />
                        </label>
                    </div>
                }
            </div>
            <div class="col-sm-6">
                @if (!string.IsNullOrWhiteSpace(_errorMessage))
                {
                    <p class="text-danger">@_errorMessage</p>
                }
            </div>
            <div class="col-sm-6">
                <div class="d-grid">
                    <button type="submit" class="btn btn-primary">Сохранить</button>
                </div>
            </div>
        </div>

    </EditForm>
</div>

@code {

    [SupplyParameterFromForm]
    private RoomTypeCreateModel Model { get; set; } = new();

    private AmenitySelectionModel[] _amenities = [];
    private string? _errorMessage = null;
    private string? _imageUrl = null;
    private IBrowserFile? _image;

    protected override async Task OnInitializedAsync()
    {
        var amenities = await AmenitiesService.GetAmenitiesAsync();

        _amenities = amenities.Select(a => new AmenitySelectionModel(a.Id, a.Name, false, null))
                                            .ToArray();
    }

    private async Task SaveRoomTypeAsync()
    {
        _errorMessage = null;

        if(_image is null)
        {
            _errorMessage = "Требуется изображение";
        }

        Model.Amenities = _amenities.Where(a => a.IsChecked)
                                    .Select(a =>
                                        new RoomTypeCreateModel.RoomTypeAmenityCreateModel(a.AmenityId, a.Unit)).ToArray();

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity is null || !authState.User.Identity.IsAuthenticated)
        {
            var loginPageUrl = NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = NavigationManager.Uri });
            NavigationManager.NavigateTo(loginPageUrl);
            return;
        }
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)!.Value;

        try
        {
            var imageUrl = await SaveImageAsync();
            if (imageUrl is null) return;
            Model.Image = imageUrl; 

            var result = await RoomTypeService.CreateRoomTypeAsync(Model, userId);

            if (result.IsSuccess)
            {
                NavigationManager.NavigateTo("/staff-admin/manage-room-types");
                return;
            }
            _errorMessage = result.ErrorMessage ?? "Ошибка сохранения типа комнаты";
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private class AmenitySelectionModel
    {
        public AmenitySelectionModel(int id, string name, bool isChecked, int? unit) =>
            (AmenityId, Name, IsChecked, Unit) = (id, name, isChecked, unit);

        public int AmenityId { get; set; }
        public string Name { get; set; }
        public bool IsChecked { get; set; }
        public int? Unit { get; set; }
    }

    private async Task OnImageSelectAsync(InputFileChangeEventArgs e)
    {
        using var imageStream = e.File.OpenReadStream();
        using var ms = new MemoryStream();
        await imageStream.CopyToAsync(ms);

        var base64ImageData = Convert.ToBase64String(ms.ToArray());
        var extension = Path.GetExtension(e.File.Name)[1..];
        _imageUrl = $"data:image/{extension};base64,{base64ImageData}";
        _image = e.File;
    }

    private async Task<string?> SaveImageAsync()
    {
        if (_image is null) return null;
        var extension = Path.GetExtension(_image.Name);
        var imageName = $"root-type-img-{Guid.NewGuid()}{extension}";

        var folderPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "room-types");
        Directory.CreateDirectory(folderPath);

        var fullFilePath = Path.Combine(folderPath, imageName);

        try
        {
            await using FileStream fs = new(fullFilePath, FileMode.Create);
            using var imageStream = _image.OpenReadStream();
            await imageStream.CopyToAsync(fs);
            return $"/images/room-types/{imageName}";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Ошибка сохранения изображения. {ex.Message}";
            return null;
        }
    }
}
